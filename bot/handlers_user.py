from aiogram import Router, F, Bot
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, InputMediaPhoto, InputFile,FSInputFile
)
from asgiref.sync import sync_to_async
from car.models import CarContent, Condition, Color, BodyType, FuelType, PriceRange

# ================== Router ==================
router = Router()

# ================== –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ==================
user_choices = {}
user_steps = {}

STEPS = [
    ("condition", Condition, "—Å–æ—Å—Ç–æ—è–Ω–∏–µ"),
    ("color", Color, "—Ü–≤–µ—Ç"),
    ("body_type", BodyType, "—Ç–∏–ø –∫—É–∑–æ–≤–∞"),
    ("fuel_type", FuelType, "—Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞"),
    ("price_range", PriceRange, "—Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω"),
]

# ================== ORM Helpers ==================
@sync_to_async
def orm_all(model):
    return list(model.objects.all())

@sync_to_async
def orm_get_by_name(model, name: str):
    return model.objects.filter(name=name).first()

@sync_to_async
def orm_find_cars(choices: dict):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ —Ü–µ–Ω–µ.
    –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, –Ω–æ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ñ–∏–ª—å—Ç—Ä–µ.
    """
    return list(
        CarContent.objects.select_related(
            "condition", "color", "body_type", "fuel_type", "price_range"
        ).filter(price_range=choices["price_range"])
    )

# ================== UI Helpers ==================
def make_keyboard(items, row_width=2):
    keyboard = []
    row = []
    for i, item in enumerate(items, start=1):
        row.append(KeyboardButton(text=item))
        if i % row_width == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
async def ask_step(message: Message, step_index: int):
    key, model, human = STEPS[step_index]
    rows = await orm_all(model)
    names = [r.name for r in rows]
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ {human}:", reply_markup=make_keyboard(names))

# ================== Handlers ==================
@router.message(F.text == "/start")
async def start(message: Message):
    user_id = message.from_user.id
    user_choices[user_id] = {}
    user_steps[user_id] = 0
    await ask_step(message, 0)

@router.message(F.text == "/cancel")
async def cancel(message: Message):
    user_id = message.from_user.id
    user_choices.pop(user_id, None)
    user_steps.pop(user_id, None)
    await message.answer(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
        reply_markup=ReplyKeyboardRemove(),
    )

@router.message()
async def handle_choice(message: Message, bot: Bot):
    user_id = message.from_user.id
    text = (message.text or "").strip()

    if user_id not in user_steps:
        user_choices[user_id] = {}
        user_steps[user_id] = 0

    step_index = user_steps[user_id]
    key, model, human = STEPS[step_index]

    obj = await orm_get_by_name(model, text)
    if not obj:
        await message.answer(f"‚ùó –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ ¬´{text}¬ª. –í—ã–±–µ—Ä–∏—Ç–µ {human} —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        await ask_step(message, step_index)
        return

    user_choices[user_id][key] = obj
    step_index += 1

    if step_index < len(STEPS):
        user_steps[user_id] = step_index
        await ask_step(message, step_index)
        return

    # ==== –ü–æ–∏—Å–∫ –∞–≤—Ç–æ ====
    cars = await orm_find_cars(user_choices[user_id])
    if not cars:
        await message.answer("üöò –ú–∞—à–∏–Ω —Å —Ç–∞–∫–∏–º —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=ReplyKeyboardRemove())
    else:
        for idx, car in enumerate(cars, start=1):
            # ---- –§–æ—Ç–æ ----
            photos = [getattr(car, f"photo{i}") for i in range(1, 6) if getattr(car, f"photo{i}")]
            try:
                if len(photos) == 1:
                    await bot.send_photo(message.chat.id, FSInputFile(photos[0].path))
                elif len(photos) > 1:
                    media = [InputMediaPhoto(media=FSInputFile(p.path)) for p in photos[:10]]
                    await bot.send_media_group(message.chat.id, media)
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ {car.title}: {e}")

            # ---- –í–∏–¥–µ–æ ----
            if car.video:
                await bot.send_video(message.chat.id, FSInputFile(car.video.path))

            # ---- –¢–µ–∫—Å—Ç ----
            text_info = (
                f"üöò –ú–∞—à–∏–Ω–∞ {idx} –∏–∑ {len(cars)}\n\n"
                f"{car.title}\n"
                f"{car.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                f"üí∞ –¶–µ–Ω–∞: {car.price_range}\n"
                f"‚öôÔ∏è –ö—É–∑–æ–≤: {car.body_type}\n"
                f"üé® –¶–≤–µ—Ç: {car.color}\n"
                f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car.fuel_type}\n"
                f"üìå –°–æ—Å—Ç–æ—è–Ω–∏–µ: {car.condition}\n"
                f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {car.owner_username or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
            )
            await message.answer(text_info)

    # ---- –°–±—Ä–æ—Å ----
    user_choices.pop(user_id, None)
    user_steps.pop(user_id, None)
    await message.answer(
        "üîé –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
        reply_markup=ReplyKeyboardRemove(),
    )
