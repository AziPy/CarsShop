from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from asgiref.sync import sync_to_async
from car.models import CarContent, CONDITION_CHOICES, COLOR_CHOICES, BODY_CHOICES, FUEL_CHOICES, PRICE_CHOICES

user_choices = {}

def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=["start"])
    dp.register_message_handler(handle_choice)  # —Ç–µ–ø–µ—Ä—å –≤—Å–µ –≤—ã–±–æ—Ä—ã —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç

async def start(message: types.Message):
    user_choices[message.from_user.id] = {}

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for key, label in CONDITION_CHOICES:
        keyboard.add(KeyboardButton(label))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)


async def handle_choice(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if user_id not in user_choices:
        user_choices[user_id] = {}

    # --- –®–∞–≥ 1: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
    if text in [label for _, label in CONDITION_CHOICES]:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        for key, label in CONDITION_CHOICES:
            if label == text:
                user_choices[user_id]["condition"] = key
        # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–≤–µ—Ç–∞
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for key, label in COLOR_CHOICES:
            keyboard.add(KeyboardButton(label))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=keyboard)
        return

    # --- –®–∞–≥ 2: —Ü–≤–µ—Ç ---
    if text in [label for _, label in COLOR_CHOICES]:
        for key, label in COLOR_CHOICES:
            if label == text:
                user_choices[user_id]["color"] = key
        # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫—É–∑–æ–≤–∞
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for key, label in BODY_CHOICES:
            keyboard.add(KeyboardButton(label))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–∑–æ–≤:", reply_markup=keyboard)
        return

    # --- –®–∞–≥ 3: –∫—É–∑–æ–≤ ---
    if text in [label for _, label in BODY_CHOICES]:
        for key, label in BODY_CHOICES:
            if label == text:
                user_choices[user_id]["body_type"] = key
        # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for key, label in FUEL_CHOICES:
            keyboard.add(KeyboardButton(label))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–ª–∏–≤–æ:", reply_markup=keyboard)
        return

    # --- –®–∞–≥ 4: —Ç–æ–ø–ª–∏–≤–æ ---
    if text in [label for _, label in FUEL_CHOICES]:
        for key, label in FUEL_CHOICES:
            if label == text:
                user_choices[user_id]["fuel_type"] = key
        # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–Ω
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for key, label in PRICE_CHOICES:
            keyboard.add(KeyboardButton(label))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:", reply_markup=keyboard)
        return

    # --- –®–∞–≥ 5: —Ü–µ–Ω–∞ ---
    if text in [label for _, label in PRICE_CHOICES]:
        for key, label in PRICE_CHOICES:
            if label == text:
                user_choices[user_id]["price_range"] = key

        choices = user_choices[user_id]

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ ORM
        cars = await sync_to_async(list)(
            CarContent.objects.filter(
                condition=choices["condition"],
                color=choices["color"],
                body_type=choices["body_type"],
                fuel_type=choices["fuel_type"],
                price_range=choices["price_range"]
            )
        )

        if cars:
            for car in cars:
                # --- –§–æ—Ç–æ ---
                photos = [getattr(car, f"photo{i}").path for i in range(1, 6) if getattr(car, f"photo{i}")]
                if len(photos) > 1:
                    media = [InputMediaPhoto(open(p, "rb")) for p in photos]
                    await message.answer_media_group(media)
                elif len(photos) == 1:
                    with open(photos[0], "rb") as photo:
                        await message.answer_photo(photo)

                # --- –í–∏–¥–µ–æ ---
                if car.video:
                    with open(car.video.path, "rb") as video:
                        await message.answer_video(video)

                # --- –¢–µ–∫—Å—Ç ---
                text_info = (
                    f"üöò {car.title}\n\n"
                    f"{car.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                    f"üí∞ –¶–µ–Ω–∞: {car.get_price_range_display()}\n"
                    f"‚öôÔ∏è –ö—É–∑–æ–≤: {car.get_body_type_display()}\n"
                    f"üé® –¶–≤–µ—Ç: {car.get_color_display()}\n"
                    f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car.get_fuel_type_display()}\n"
                    f"üìå –°–æ—Å—Ç–æ—è–Ω–∏–µ: {car.get_condition_display()}\n"
                    f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {car.user}"
                )
                await message.answer(text_info)
        else:
            await message.answer("üöò –ú–∞—à–∏–Ω —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∫–∞ –Ω–µ—Ç.")

        # –ß–∏—Å—Ç–∏–º –≤—ã–±–æ—Ä –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        user_choices.pop(user_id, None)
        await message.answer("üîé –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.", reply_markup=types.ReplyKeyboardRemove())
